<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.dao.PostDao">
  <!-- 게시물 작성 -->
  <insert id="insertPost" parameterType="Post">
    <selectKey keyProperty="postId" resultType="Integer" order="BEFORE">
      select seq_posts_post_id.nextval from dual
    </selectKey>
    insert into posts (
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id,
      wapplyended_at, walkstarted_at, walkended_at
    ) values (
      #{postId}, #{postTitle}, #{postContent}, 0, SYSTIMESTAMP, #{isRequest}, #{postUserId},
      #{wApplyEndedAt}, #{walkStartedAt}, #{walkEndedAt}
    )
  </insert>

  <!-- 게시물 작성 시 이미지 처리 -->
  <insert id="insertPostImage" parameterType="com.example.demo.dto.PostImage">
    <selectKey keyProperty="postImageId" resultType="Integer" order="BEFORE">
      select seq_post_images_post_image_id.nextval from dual
    </selectKey>
    insert into post_images (
      post_image_id, post_attach_oname, post_attach_type, post_attach_data, created_at, post_id
    ) values (
      #{postImageId}, #{postAttachOname}, #{postAttachType}, #{postAttachData}, SYSTIMESTAMP, #{postId}
    )
  </insert>
  
  <!-- 게시물 하나 가져오기 -->
  <select id="selectByPostId" parameterType="Integer" resultType="Post">
    select
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
      wapplyended_at, walkstarted_at, walkended_at
    from posts
    where post_id = #{postId}
  </select>

  <!-- 게시물 전체 목록 가져오기 -->
  <select id="selectByPage" parameterType="Pager" resultType="Post"> 
  <!--resultType은 하나의 행을 리턴하기 때문에 List<>가아닌 Post를 씀-->
    <![CDATA[
    select rnum, post_id, post_title, post_content, post_like_count, user_id as postUserId, created_at
    from (
        select rownum as rnum, post_id, post_title, post_content, post_like_count, user_id, created_at
        from (
            select post_id, post_title, post_content, post_like_count, user_id, created_at
            from  posts
            order by post_id desc
        )
        where rownum <= #{endRowNo}
    )
    where rnum >= #{startRowNo} 
    ]]>
  </select>
  
  <!-- 특정 사용자 게시물 목록 가져오기 -->
  <select id="selectAllPostByUserId" parameterType="Integer" resultType="Post">
    select 
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
      wapplyended_at, walkstarted_at, walkended_at
    from posts
    where user_id = #{postUserId}
  </select>

  <!-- 게시물 수정하기 -->
  <update id="updatePost" parameterType="Post">
    update posts
    set post_title = #{postTitle},
        post_content = #{postContent},
        is_request = #{isRequest}
        <if test='isRequest != null and isRequest.equals("Y")'>
          , wapplyended_at = #{wApplyEndedAt}
          , walkstarted_at = #{walkStartedAt}
          , walkended_at = #{walkEndedAt}
        </if>
    where post_id = #{postId}
  </update>

  <!-- ✅ 전체 이미지 삭제(해당 게시물) -->
  <delete id="deletePostImagesByPostId" parameterType="int">
    delete from post_images where post_id = #{value}
  </delete>

  <!-- 게시물 수정 시 이미지 처리 -->
  

  <!-- 게시물 좋아요 수 증가 -->
  <update id="increasePostLikecount" parameterType="int">
    update posts
    set post_like_count = post_like_count + 1
    where post_id = #{value}
  </update>

  <!-- 게시물 좋아요 수 감소 -->
  <update id="decreasePostLikecount" parameterType="int">
    <![CDATA[
    update posts
    set post_like_count = post_like_count - 1
    where post_id = #{postId} and post_like_count > 0
    ]]>
  </update>

  <!-- 게시물 삭제 -->
  <delete id="deletePost" parameterType="Integer">
    delete from posts
    where post_id = #{value}
  </delete>

  <!-- 게시물 삭제 시 이미지 처리 -->
  <delete id="deletePostImage" parameterType="Integer">
    delete from post_images
    where post_id = #{postId}
  </delete>

  <!-- 페이지 모든 행 수 -->
  <select id="countAll" resultType="int">
    select count(*)
    from posts
  </select>

  <!-- 특정 사용자 페이지 모든 행 수 -->
  <select id="countAllByUserId" parameterType="Integer" resultType="int">
    select count(*)
    from posts
    where user_id = #{value}
  </select>

</mapper>
