<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.dao.PostDao">

  <!-- 게시물 작성 -->
  <insert id="insertPost" parameterType="Post">
    <selectKey keyProperty="postId" resultType="Integer" order="BEFORE">
      select seq_posts_post_id.nextval from dual
    </selectKey>
    insert into posts (
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id,
      wapplyended_at, walkstarted_at, walkended_at
    ) values (
      #{postId}, #{postTitle}, #{postContent}, 0, SYSTIMESTAMP, #{isRequest}, #{postUserId},
      #{wApplyEndedAt}, #{walkStartedAt}, #{walkEndedAt}
    )
  </insert>
  
  
  <!-- 게시물 하나 가져오기 -->
  <select id="selectByPostId" parameterType="Integer" resultType="Post">
    select
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
      wapplyended_at, walkstarted_at, walkended_at
    from posts
    where post_id = #{postId}
  </select>


  <!-- 게시물 전체 목록 가져오기 -->
  <select id="selectByPage" parameterType="Pager" resultType="Post"> 
  <!--resultType은 하나의 행을 리턴하기 때문에 List<>가아닌 Post를 씀-->
    <![CDATA[
    select rnum, post_id, post_title, post_content, post_like_count, user_id as postUserId, created_at, is_request
    from (
        select rownum as rnum, post_id, post_title, post_content, post_like_count, user_id, created_at, is_request
        from (
            select post_id, post_title, post_content, post_like_count, user_id, created_at, is_request
            from  posts
            order by post_id desc
        ) inner_query
        where rownum <= #{endRowNo}
    )
    where rnum >= #{startRowNo}
    ]]>
  </select>
  

  <!-- 특정 사용자 게시물 목록 가져오기 -->
  <select id="selectAllPostByUserId" parameterType="Integer" resultType="Post">
    select 
      post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
      wapplyended_at, walkstarted_at, walkended_at
    from posts
    where user_id = #{postUserId}
  </select>


  <!-- 게시물 수정하기 -->
  <update id="updatePost" parameterType="Post">
    update posts
    set post_title = #{postTitle},
        post_content = #{postContent},
        is_request = #{isRequest},
        updated_at = SYSTIMESTAMP
        <if test='isRequest != null and isRequest.equals("Y")'>
          , wapplyended_at = #{wApplyEndedAt}
          , walkstarted_at = #{walkStartedAt}
          , walkended_at = #{walkEndedAt}
        </if>
    where post_id = #{postId}
  </update>
  

  <!-- 게시물 좋아요 수 증가 -->
  <update id="increasePostLikecount" parameterType="int">
    update posts
    set post_like_count = post_like_count + 1
    where post_id = #{value}
  </update>


  <!-- 게시물 좋아요 수 감소 -->
  <update id="decreasePostLikecount" parameterType="int">
    <![CDATA[
    update posts
    set post_like_count = post_like_count - 1
    where post_id = #{postId} and post_like_count > 0
    ]]>
  </update>

  <!-- 게시물 삭제 -->
  <delete id="deletePost" parameterType="Integer">
    delete from posts
    where post_id = #{value}
  </delete>


  <!-- 페이지 모든 행 수 -->
  <select id="countAll" resultType="int">
    select count(*)
    from posts
  </select>
  

  <!-- 특정 사용자 페이지 모든 행 수 -->
  <select id="countAllByUserId" parameterType="Integer" resultType="int">
    select count(*)
    from posts
    where user_id = #{value}
  </select>


  <!--          -->
  <!-- 그룹 산책 -->
  <!--          -->

  <!-- 그룹 산책 모집글 목록 조회 -->
  <!-- <select id="selectAllGroupWalkPost" resultType="Post">
    <![CDATA[ 
    select rnum, post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
          wapplyended_at, walkstarted_at, walkended_at
    from (
      select rownum as rnum, post_id, post_title, post_content, post_like_count, created_at, is_request, 
          user_id as postUserId, wapplyended_at, walkstarted_at, walkended_at
      from(
        select post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
          wapplyended_at, walkstarted_at, walkended_at
        from posts
        where is_request = 'Y'
        order by post_id desc
      )
      where rownum < 10
    )
    where rnum > 1
    ]]>
  </select> -->

  <!-- 그룹 산책 모집글 목록 조회 pager 이슈 때문에 형식 바꿈 -->
  <select id="selectAllGroupWalkPost" resultType="Post">
  <![CDATA[
  SELECT rnum,
         post_id          AS postId,
         post_title       AS postTitle,
         post_content     AS postContent,
         post_like_count  AS postLikeCount,
         created_at       AS createdAt,
         is_request       AS isRequest,
         user_id          AS postUserId,
         wapplyended_at   AS wApplyEndedAt,
         walkstarted_at   AS walkStartedAt,
         walkended_at     AS walkEndedAt
  FROM (
    SELECT rownum AS rnum,
           post_id, post_title, post_content, post_like_count, created_at, is_request,
           user_id,
           wapplyended_at, walkstarted_at, walkended_at
    FROM (
      SELECT post_id, post_title, post_content, post_like_count, created_at, is_request,
             user_id,
             wapplyended_at, walkstarted_at, walkended_at
      FROM TTM.POSTS
      WHERE is_request = 'Y'
      ORDER BY post_id DESC
    )
    WHERE rownum < 10
  )
  WHERE rnum > 1
  ]]>
</select>

  
  <!-- 그룹 산책 완료된 글 목록 조회 -->
  <!-- <select id="selectAllEndedGroupWalk" parameterType="Post">
    <![CDATA[ 
    select rnum, post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
          wapplyended_at, walkstarted_at, walkended_at
    from (
      select rownum as rnum, post_id, post_title, post_content, post_like_count, created_at, is_request, 
          user_id as postUserId, wapplyended_at, walkstarted_at, walkended_at
      from(
        select post_id, post_title, post_content, post_like_count, created_at, is_request, user_id as postUserId,
          wapplyended_at, walkstarted_at, walkended_at
        from posts
        where walkended_at is not null
        order by walkended_at desc
      )
      where rownum < 10
    )
    where rnum > 1
    ]]>
  </select> -->

  <!-- 그룹 산책 완료된 글 목록 조회 -->
<select id="selectAllEndedGroupWalk" resultType="Post">
  <![CDATA[
  SELECT rnum,
         post_id         AS postId,
         post_title      AS postTitle,
         post_content    AS postContent,
         post_like_count AS postLikeCount,
         created_at      AS createdAt,
         is_request      AS isRequest,
         user_id         AS postUserId,
         wapplyended_at  AS wApplyEndedAt,
         walkstarted_at  AS walkStartedAt,
         walkended_at    AS walkEndedAt
  FROM (
    SELECT rownum AS rnum,
           post_id, post_title, post_content, post_like_count, created_at, is_request,
           user_id,
           wapplyended_at, walkstarted_at, walkended_at
    FROM (
      SELECT post_id, post_title, post_content, post_like_count, created_at, is_request,
             user_id,
             wapplyended_at, walkstarted_at, walkended_at
      FROM TTM.POSTS
      WHERE walkended_at IS NOT NULL
      ORDER BY walkended_at DESC
    )
    WHERE rownum < 10
  )
  WHERE rnum > 1
  ]]>
</select>

  <!-- 그룹 산책 완료된 글 하나 조회 -->
  <select id="selectEndedGroupWalk" parameterType="Integer" resultType="Post">
    select post_id, post_title, post_content, post_like_count, created_at, is_request, 
        user_id as postUserId, wapplyended_at, walkstarted_at, walkended_at
    from posts
    where post_id = #{postId} and walkended_at is not null
  </select>

  <!-- 그룹산책 상태 변경과 그 시각 입력 -->
  <!-- <update id="markWalkStartedNow">
    update posts
    set walkstarted_at = SYSTIMESTAMP,
        updated_at     = SYSTIMESTAMP
    where post_id = #{postId}
      and is_request = 'Y'
      and wapplyended_at is not null
      and walkstarted_at is null

  </update>

  <update id="markWalkEndedNow">
    update posts
    set walkended_at = SYSTIMESTAMP,
        updated_at   = SYSTIMESTAMP
    where post_id = #{postId}
      and is_request = 'Y'
      and walkstarted_at is not null
      and walkended_at is null
  </update>

  <update id="markWApplyEndedNow">
    update posts
    set wapplyended_at = SYSTIMESTAMP,
        updated_at     = SYSTIMESTAMP
    where post_id = #{postId}
      and is_request = 'Y'
      and wapplyended_at is null
  </update> -->

  <update id="markWalkByCode">
  update posts
  <set>
    <choose>
      <when test="code == 1">
        wapplyended_at = SYSTIMESTAMP,
      </when>
      <when test="code == 2">
        walkstarted_at = SYSTIMESTAMP,
      </when>
      <when test="code == 3">
        walkended_at = SYSTIMESTAMP,
      </when>
    </choose>
    updated_at = SYSTIMESTAMP
  </set>
  where post_id = #{postId}
    and is_request = 'Y'
    <choose>
      <when test="code == 1">
        and wapplyended_at is null
      </when>
      <when test="code == 2">
        and wapplyended_at is not null
        and walkstarted_at is null
      </when>
      <when test="code == 3">
        and walkstarted_at is not null
        and walkended_at is null
      </when>
    </choose>
</update>

</mapper>
